Notes from watching the app traffic:

On startup
- it does an arp scan of the connected network
- connects to TCP/7 , but doesnt send any traffic if connection accepted

On "add device"
- Sends an encoded set of packets with config data (See section below)

- connects to TCP/8189

    > 38e523d3d583
    < 0102030405cf
    > 38c51ba9d583
    < 01020304056d
    > 38d90fbd1083
    < 3801fc80ff0200320001ff00000300ff83

The steps to successfully connect the LED controller to your wifi are
both a somewhat fragile process and not fully spelt out in the existing
documentation.  I have recorded a process that has worked for me below.

Also be aware that the WIFI details are not sometimes not permanently
stored in the controller, so you may need to repeat the process each
time you plug it in.

Process to successfully "add device" to your Wifi:

- Disconnect power to your wifi controller for at least 2 minutes
- If the LEDShop app is running, kill it off
- Copy your wifi PSK into your clipboard
- Connect your phone to your wifi
- Start the LEDShop app and let it complete its "scanning for LAN devices"
- Select "Add device"
- Paste your wifi PSK into the "password of wifi" box
- Connect power to your wifi controller
- Pause no more than 5 seconds
- Click OK on the "password of wifi" box
- wait for no more than 2 minutes (If you can check for new devices on your
  WIFI, do that and watch for the LED controller to appear)
- Hit the back button on the LEDShop app
- "Pull down" the LEDShop list of devices, thus requesting it to do a scan
  for network devices


---
Some people on github have some hints:
https://github.com/Spled/spled.github.io/issues/1

---
Seen commands:

0x03: CMD_SPEED
    d8 71 12 03 == None
    db 87 eb 03 == None
    f7 6c 22 03 == None
    ff 7c 69 03 == None
    0f 1f ec 03 == None
    0c b8 bc 03 == None
    05 50 df 03 == None
    01 cf 49 03 == None


0x10: CMD_SYNC
    17 8b 2e 10 == 38 01 fc 80 ff 02 00 40 00 01 ff 00 00 03 00 ff 83
    20 77 1d 10 == 38 01 fc 80 ff 02 00 40 00 01 ff 00 00 03 00 ff 83
    c3 c6 97 10 == 38 01 fc 80 ff 02 00 32 00 01 ff 00 00 02 00 ff 83
    d3 f9 2f 10 == 38 01 d4 01 4c 02 00 40 00 01 00 d5 ff 03 00 ff 83
    d9 0f bd 10 == 38 01 fc 80 ff 02 00 32 00 01 ff 00 00 03 00 ff 83
    d9 0f bd 10 == 38 01 fc 80 ff 02 00 40 00 01 ff 00 00 03 00 ff 83

0x14: CMD_SET_DEVICE_NAME
    9b 9c 27 14 == 31, followed by 33 62 32 63 63 61 31 3a == None

0x22: CMD_COLOR
    00 00 ff 22 == None
    ff 00 ff 22 == None
    00 ff ff 22 == None
    00 fe ff 22 == None

0x24: CMD_CUSTOM_PREVIEW
    e9 39 9a 24 == 31, followed by 900 bytes (300 RGBs) == 31 repeated

0x2a: CMD_BRIGHTNESS
    6b 12 51 2a == None
    38 aa 8c 2a == None
    49 a2 57 2a == None
    4c a6 f0 2a == None

0x2c: CMD_MODE_CHANGE
    d4 37 94 2c == None
    d1 b2 df 2c == None
    ce 64 eb 2c == None
    cd 92 e6 2c == None
    d1 11 e6 2c == None
    d4 d4 49 2c == None
    d4 29 95 2c == None

0x2d: CMD_DOT_COUNT
    00 01 f0 2d == None
    40 00 97 2d == None
    41 00 47 2d == None
    40 00 18 2d == None

0x2e: CMD_SEC_COUNT
    01 00 c2 2e == None
    01 00 4a 2e == None
    01 00 5f 2e == None
    01 00 f7 2e == None

0x2f: CMD_CHECK_DEVICE_IS_COOL
    3a 98 9e 2f == 31
    3b 40 8e 2f == 31
    66 b0 1a 2f == 31
    75 d0 e2 2f == 31
    9f 94 58 2f == 31
    ea 39 c4 2f == 31
    ef 51 29 2f == 31
    f7 28 67 2f == 31

0xd5: CMD_CHECK_DEVICE
    53 6c 9a d5 == 01 02 03 04 05 f7
    72 4d 53 d5 == 01 02 03 04 05 76
    81 89 c8 d5 == 01 02 03 04 05 27
    87 c4 80 d5 == 01 02 03 04 05 17
    91 81 a2 d5 == 01 02 03 04 05 15
    9b ae 6b d5 == 01 02 03 04 05 bb
    a5 49 5a d5 == 01 02 03 04 05 27
    a8 d1 b8 d5 == 01 02 03 04 05 45
    bc 1a b6 d5 == 01 02 03 04 05 7d
    bd fe a6 d5 == 01 02 03 04 05 fd
    c3 85 b5 d5 == 01 02 03 04 05 57
    c5 1b a9 d5 == 01 02 03 04 05 6d
    e5 23 d3 d5 == 01 02 03 04 05 cf
    f8 85 72 d5 == 01 02 03 04 05 57
    fa 98 df d5 == 01 02 03 04 05 76

---
Tested commands:

0x00:           no response
0x01:           no response
0x02:           CMD_CUSTOM_EFFECT, sets all white, data appears to do something
0x03:           commands.speed(speed)
0x04:           no response
0x05:           no response
0x06:           commands.mode_change(0xfc)
0x07:           CMD_CUSTOM_DELETE, returns 0x31, sets modenr 0
0x08 - 0x0f:    no response
0x10:           commands.sync()
                    [0] = 0x38
                    [1] = display on/off
                    [2] = modenr or 0xfc for AUTO
                    [3] = speed
                    [4] = brightness
                    [5] = pixel RGB order
                    [6,7] = dots per segment
                    [8,9] = segments
                    [10,11,12] = static color (RGB)
0x11 - 0x13:    no response
0x14:           CMD_SET_DEVICE_NAME untested
0x15:           no response
0x16:           CMD_SET_DEVICE_PASSWORD untested
0x17 - 0x1b:    no response
0x1c:           commands.set_ic_model(model)
                data1 is chip type 0-0x1c
0x1d - 0x1f:    no response
0x20:           CMD_GET_RECORD_NUM, returns 0x00, data appears to be ignored
0x21:           no response
0x22:           CMD_COLOR
                    data is RGB color to be used for any 'simple' mode
0x23:           no response
0x24:           CMD_CUSTOM_PREVIEW, returns 0x31
                    shows something like CMD_CUSTOM_EFFECT
                    then resets to modenr 0
0x25:           CMD_CHANGE_PAGE, no response
0x26 - 0x29:    no response
0x2a:           CMD_BRIGHTNESS, data1 is brightness <2 = off
0x2b:           no response
0x2c:           commands.mode_change(mode)
                    data1 is mode
                        patterns 0-179
                        simple 205-212
0x2d:           CMD_DOT_COUNT,
                    data1 is low byte
                    data2 is high byte
                    dots is 1 - 0x697, outside this range it resets to 0x32
0x2e:           CMD_SEC_COUNT,
                    data1 is low byte
                    data2 is high byte
                    segs is 0 - ?
                    display slows down with high numbers and watchdog might hit
0x2f:           CMD_CHECK_DEVICE_IS_COOL, returns 0x31
0x30 - 0x3b:    no response
0x3c:           CMD_SET_RGB_SEQ no response
                    data1 is 0 - 5 set RGB pixel ordering
0x3d - 0x4b:    no response
0x4c:           CMD_CUSTOM_RECODE, returns 0x31, blanks screen for a bit
0x4d - 0x76:    no response
0x77:           cmd_get_device_name() works
0x78 - 0x87:    no response
0x88:           CMD_SET_DEVICE_TO_AP_MODE, brief pause in display animation
0x89 - 0xa9:    no response
0xaa:           CMD_TOGGLE_LAMP, returns state, toggles display on/off
0xab - 0xd4:    no response
0xd5:           cmd_check_device() works
0xd6 - 0xff:    no response

---
CMD_CUSTOM_PREVIEW:

The app has been observed to send a frame packet size of 900 bytes
thus there is room for 300 pixels.  If the controller is configred
with a dot count larger than 300 (and more than 300 LEDs are connected)
then display state corruption has been observed - perhaps there is
a limit of 300 pixels per segment?

The pixels are arranged differently depending on how many dots the
controller has been configured to show.

int per_frame = 900  /* bytes */
int per_pixel = 3    /* bytes */

bytes_per_slot = (per_frame/per_pixel) / displayed_pixels * per_pixel
pixel_address[n] = bytes_per_slot * n

Thus:
-  3 displayed pixels: at 0, 300, 600
-  4 displayed pixels: at 0, 225, 450, 675
- 10 displayed pixesl: at 0, 90, 180, 270, 360, 450, 540, 630, 720, 810

Note that the wifi device advertises an MTU of 576, however when sending
the pixel data, this does not work properly.  Once the transmitted frame
is broken into more than one TCP packet, something goes wrong with the
pixel layout.

Android ignores the MTU offered by the device, so we can do that too (for
testing at least) with the following command:

    sudo ip route add 192.168.4.1 dev wlan0 mtu 1500

---
WIFI configure

The app sends multicast UDP packets, with the packet length encoding the data
to be sent.  This is done because a device with no wifi credentials can still
sniff the size of packets, even if the data is encrypted

SYNC_BURST
    Simple signal for the reciever to use to synchronise to the
    transmission.

    Consists of multiple groups of packets, all following the pattern:
        0x203
        0x202
        0x201
        0x200

DATA_BYTES
    Data appears to come in groups of three.  Each group has a data
    counter byte as the second in the group.  This byte starts at 0x128
    and increases for each new data item.

    The data bytes will be repeated multiple times during the config
    burst and the counter can be used to fill in any missing bytes.

    The data bytes are decoded with some bit fiddling to produce the
    final config packet

    guess = (
        (d2 & 0x7) |
        (~d2 & 8) |
        (d0 & 7) <<4 |
        (~d0 & 8) <<4
    )

CONFIG PACKET

An example packet is shown below:

H: 000: 1b 0c 29 16 af c0 a8 01 bf 61 61 61 61 62 62 62 |..)......aaaabbb|
H: 010: 62 63 63 63 63 5a 5a 5a 5a 5a 5a                |bccccZZZZZZ|

    char len_total;
    char len_psk;
    char unk[7];
    char psk[];
    char ssid[];

The decoding I have currently guessed breaks down for a psk with spaces in
them.  The unknown bytes also change in ways that look wrong in various
packets, so there is probably still some missing steps.
